name: Docker Build # Github Action 페이지 좌측 리스트에 표시될 이름
on:
  workflow_call:
    inputs:
      env:
        type: string
        required: false
      type:
        type: string
        required: true

env:
  DOCKER_IMAGE: ghcr.io/dy-make/withme-${{ inputs.type }} # ghcr에 업로드될 이미지 이름, format: ghcr.io/깃허브유저이름/이미지이름

jobs:
  docker-build:
    name: Docker Build
    environment: ${{ inputs.env }}
    runs-on: ubuntu-latest
    steps:
      # Checkout Repository
      - name: Check out source code
        uses: actions/checkout@v2.1.0

      - name: Get hashed ref name
        run: |
          hashedString=$(echo -n "your_string_to_hash" | sha256sum | awk '{print $1}')
          echo "REF_NAME_SHA=$hashedString" >> $GITHUB_ENV

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        if: ${{ inputs.type == 'frontend'}}
        with:
          name: node-build-artifact-frontend-${{ env.REF_NAME_SHA }}
          path: ./apps/frontend/.next

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        if: ${{ inputs.type == 'backend'}}
        with:
          name: node-build-artifact-backend-${{ env.REF_NAME_SHA }}
          path: ./apps/backend/dist

      - name: Check dist .next
        if: ${{ inputs.type == 'frontend'}}
        run: echo ${{ hashFiles('./apps/frontend/.next/**/*') }}

      - name: Check dist hash
        if: ${{ inputs.type == 'backend'}}
        run: echo ${{ hashFiles('./apps/backend/dist/**/*') }}

      # tonistiigi/binfmt 이미지를 이용해 qemu 설치
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # docker buildx 설치
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # Login to ghcr
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }} # Settings > Secrets > Actions 의 GHCR_PAT 값을 불러옴

      # Docker Build
      - name: Docker Build
        uses: docker/build-push-action@v3
        with:
          file: ./apps/${{ inputs.type }}/Dockerfile
          context: .
          push: true # ghcr에 push
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.run_id }},${{ env.DOCKER_IMAGE }}:latest # 이미지 버전 [이미지 고유 아이디, latest]
          # platforms: linux/arm64
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max
